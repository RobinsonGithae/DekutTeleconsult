package com.example.dekutteleconsult;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;

import java.util.HashMap;
import java.util.Map;

public class DoctorSignupActivity extends AppCompatActivity {

    Button DocsignupBtn;
    EditText DocusernameET,DocemailET,DocpasswrdET,DocconfrmPasswrdET;


    FirebaseAuth fAuth;
    FirebaseFirestore fStore;
    String Docusermame,Docpasswrd,Doccnfrmpasswrd,Docemail;



    public void StudentSignUpInputs(){
        //method to get all inputs
        Docusermame= DocusernameET.getText().toString().trim();
        Docemail=DocemailET.getText().toString().trim();
        Docpasswrd= DocpasswrdET.getText().toString().trim();
        Doccnfrmpasswrd= DocconfrmPasswrdET.getText().toString().trim();

    }


    public void FirebaseRegisterUser(){
        fAuth=FirebaseAuth.getInstance();
        fStore=FirebaseFirestore.getInstance();
        StudentSignUpInputs();
        fAuth.createUserWithEmailAndPassword( Docemail, Docpasswrd).addOnSuccessListener(new OnSuccessListener<AuthResult>() {
            @Override
            public void onSuccess(AuthResult authResult) {
                //check and toast if user created successfully
                Toast.makeText(getApplicationContext(),"Account created successfully",Toast.LENGTH_LONG).show();
                //GET user info of currently registred
                FirebaseUser user=fAuth.getCurrentUser();
                //create a users collection document reference in firestore to store all users details if it is not present.
                // If collection reference exists Also assign the new User`sID generated by firebase during authentication(registration) to the reference.
                DocumentReference df=fStore.collection("Users").document(user.getUid());
                //now store user data as key value pairs in a hashmap.
                Map<String,Object> UserInfoMap=new HashMap<>();
                UserInfoMap.put("Username",Docusermame);
                //Specify if user is student or doctor here. If student give 0 if doctor give 1
                UserInfoMap.put("isDoctor","1");

                //save/write new user info Map data to firestore Users collection.
                df.set(UserInfoMap);


                Intent intent =new Intent(DoctorSignupActivity.this,DoctorDrawerActivity.class);

                startActivity(intent);
                //Use finish 2 Prevent user from going back to signup after creating account
                finish();




            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                String SignupErr=e.getMessage();

                Toast.makeText(getApplicationContext(),"Account creation Failed because "+SignupErr+" Please try again Later",Toast.LENGTH_LONG).show();

            }
        });






    }



    public Boolean CustomInputValidator(){
        //a custom input validation method
        if (TextUtils.isEmpty(DocusernameET.getText().toString())){
            DocusernameET.setError("Username can`t be empty");
            return false;
        }
        if (TextUtils.isEmpty(DocemailET.getText().toString())){
            DocemailET.setError("Email can`t be empty");
            return false;
        }


        if (DocpasswrdET.getText().toString().trim()==null){
            DocpasswrdET.setError("password can`t be empty");
            return false;
        }

        if (DocconfrmPasswrdET.getText().toString().trim()==null){
            DocconfrmPasswrdET.setError("Confirm password can`t be empty");
            return false;
        }


        if (DocpasswrdET.getText().toString().trim().length() < 8) {

            DocpasswrdET.setError("Password should be atleast 8 characters");
            return false;
        }
        if (DocconfrmPasswrdET.getText().toString().trim().length() < 8) {

            DocconfrmPasswrdET.setError("Password should be atleast 8 characters");
            return false;
        }


        if (!((DocpasswrdET.getText().toString().trim()).equals(DocconfrmPasswrdET.getText().toString().trim())) ){
            DocconfrmPasswrdET.setError("Initial password & confirm must be same");
            return false;

        } else{
            return true;
        }



    }









    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_doctor_signup);



        DocsignupBtn=(Button)findViewById(R.id.btnDocSignup);
        DocusernameET=(EditText) findViewById(R.id.ETDocsignupUsrnm);
        DocpasswrdET=(EditText)findViewById(R.id.ETDocsgnupPswd);
        DocconfrmPasswrdET=(EditText)findViewById(R.id.ETDocSignupconfirmPswrd);
        DocemailET=(EditText)findViewById(R.id.ETDocsignupEmail);






        DocsignupBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // CustomInputValidator();
                if (CustomInputValidator()==true){
                    // Call CustomInputValidator to check if inputs are valid;
                    //if inputs valid then REGISTER USER using FirebaseRegisterUser method
                    FirebaseRegisterUser();

                }


            }
        });











    }
}
